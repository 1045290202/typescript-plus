import { AbstractKeyword, AccessorKeyword, ArrayBindingPattern, ArrayLiteralExpression, ArrayTypeNode, ArrowFunction, AsExpression, AssertClause, AssertEntry, AssertsKeyword, AsteriskToken, AsyncKeyword, AwaitExpression, AwaitKeyword, BigIntLiteral, BinaryExpression, BindingElement, Block, BreakStatement, Bundle, CallExpression, CallSignatureDeclaration, CaseBlock, CaseClause, CaseKeyword, CatchClause, ClassDeclaration, ClassExpression, ClassStaticBlockDeclaration, ColonToken, CommaListExpression, ComputedPropertyName, ConditionalExpression, ConditionalTypeNode, ConstructorDeclaration, ConstructorTypeNode, ConstructSignatureDeclaration, ContinueStatement, DebuggerStatement, Decorator, DefaultClause, DefaultKeyword, DeleteExpression, DoStatement, DotDotDotToken, ElementAccessExpression, EmptyStatement, EndOfDeclarationMarker, EnumDeclaration, EnumMember, EqualsGreaterThanToken, ExclamationToken, ExportAssignment, ExportDeclaration, ExportKeyword, ExportSpecifier, ExpressionStatement, ExpressionWithTypeArguments, ExternalModuleReference, ForInStatement, ForOfStatement, ForStatement, FunctionDeclaration, FunctionExpression, FunctionTypeNode, GetAccessorDeclaration, HeritageClause, Identifier, IfStatement, ImportClause, ImportDeclaration, ImportEqualsDeclaration, ImportExpression, ImportSpecifier, ImportTypeAssertionContainer, ImportTypeNode, IndexedAccessTypeNode, IndexSignatureDeclaration, InferTypeNode, InterfaceDeclaration, IntersectionTypeNode, JSDoc, JSDocAllType, JSDocAugmentsTag, JSDocAuthorTag, JSDocCallbackTag, JSDocClassTag, JSDocDeprecatedTag, JSDocEnumTag, JSDocFunctionType, JSDocImplementsTag, JSDocLink, JSDocLinkCode, JSDocLinkPlain, JSDocMemberName, JSDocNamepathType, JSDocNameReference, JSDocNonNullableType, JSDocNullableType, JSDocOptionalType, JSDocOverloadTag, JSDocOverrideTag, JSDocParameterTag, JSDocPrivateTag, JSDocPropertyTag, JSDocProtectedTag, JSDocPublicTag, JSDocReadonlyTag, JSDocReturnTag, JSDocSatisfiesTag, JSDocSeeTag, JSDocSignature, JSDocTemplateTag, JSDocThisTag, JSDocThrowsTag, JSDocTypedefTag, JSDocTypeExpression, JSDocTypeLiteral, JSDocTypeTag, JSDocUnknownTag, JSDocUnknownType, JSDocVariadicType, JsxAttribute, JsxAttributes, JsxClosingElement, JsxClosingFragment, JsxElement, JsxExpression, JsxFragment, JsxOpeningElement, JsxOpeningFragment, JsxSelfClosingElement, JsxSpreadAttribute, JsxText, LabeledStatement, LiteralTypeNode, MappedTypeNode, MergeDeclarationMarker, MetaProperty, MethodDeclaration, MethodSignature, MinusToken, MissingDeclaration, ModuleBlock, ModuleDeclaration, NamedExports, NamedImports, NamedTupleMember, NamespaceExport, NamespaceExportDeclaration, NamespaceImport, NewExpression, Node, NonNullExpression, NoSubstitutionTemplateLiteral, NotEmittedStatement, NumericLiteral, ObjectBindingPattern, ObjectLiteralExpression, OmittedExpression, OptionalTypeNode, OverrideKeyword, ParameterDeclaration, ParenthesizedExpression, ParenthesizedTypeNode, PartiallyEmittedExpression, PlusToken, PostfixUnaryExpression, PrefixUnaryExpression, PrivateIdentifier, PropertyAccessExpression, PropertyAssignment, PropertyDeclaration, PropertySignature, QualifiedName, QuestionDotToken, QuestionToken, ReadonlyKeyword, RegularExpressionLiteral, RestTypeNode, ReturnStatement, SatisfiesExpression, SemicolonClassElement, SetAccessorDeclaration, ShorthandPropertyAssignment, SourceFile, SpreadAssignment, SpreadElement, StaticKeyword, StringLiteral, SuperExpression, SwitchStatement, SyntaxKind, SyntaxList, SyntheticExpression, SyntheticReferenceExpression, TaggedTemplateExpression, TemplateExpression, TemplateHead, TemplateLiteralTypeNode, TemplateLiteralTypeSpan, TemplateMiddle, TemplateSpan, TemplateTail, ThisTypeNode, ThrowStatement, Token, TryStatement, TupleTypeNode, TypeAliasDeclaration, TypeAssertion, TypeLiteralNode, TypeOfExpression, TypeOperatorNode, TypeParameterDeclaration, TypePredicateNode, TypeQueryNode, TypeReferenceNode, UnionTypeNode, UnparsedPrepend, UnparsedSource, VariableDeclaration, VariableDeclarationList, VariableStatement, VoidExpression, WhileStatement, WithStatement, YieldExpression } from "../_namespaces/ts";
export declare function isNumericLiteral(node: Node): node is NumericLiteral;
export declare function isBigIntLiteral(node: Node): node is BigIntLiteral;
export declare function isStringLiteral(node: Node): node is StringLiteral;
export declare function isJsxText(node: Node): node is JsxText;
export declare function isRegularExpressionLiteral(node: Node): node is RegularExpressionLiteral;
export declare function isNoSubstitutionTemplateLiteral(node: Node): node is NoSubstitutionTemplateLiteral;
export declare function isTemplateHead(node: Node): node is TemplateHead;
export declare function isTemplateMiddle(node: Node): node is TemplateMiddle;
export declare function isTemplateTail(node: Node): node is TemplateTail;
export declare function isDotDotDotToken(node: Node): node is DotDotDotToken;
/** @internal */
export declare function isCommaToken(node: Node): node is Token<SyntaxKind.CommaToken>;
export declare function isPlusToken(node: Node): node is PlusToken;
export declare function isMinusToken(node: Node): node is MinusToken;
export declare function isAsteriskToken(node: Node): node is AsteriskToken;
export declare function isExclamationToken(node: Node): node is ExclamationToken;
export declare function isQuestionToken(node: Node): node is QuestionToken;
export declare function isColonToken(node: Node): node is ColonToken;
export declare function isQuestionDotToken(node: Node): node is QuestionDotToken;
export declare function isEqualsGreaterThanToken(node: Node): node is EqualsGreaterThanToken;
export declare function isIdentifier(node: Node): node is Identifier;
export declare function isPrivateIdentifier(node: Node): node is PrivateIdentifier;
/** @internal */
export declare function isExportModifier(node: Node): node is ExportKeyword;
/** @internal */
export declare function isDefaultModifier(node: Node): node is DefaultKeyword;
/** @internal */
export declare function isAsyncModifier(node: Node): node is AsyncKeyword;
export declare function isAssertsKeyword(node: Node): node is AssertsKeyword;
export declare function isAwaitKeyword(node: Node): node is AwaitKeyword;
/** @internal */
export declare function isReadonlyKeyword(node: Node): node is ReadonlyKeyword;
/** @internal */
export declare function isStaticModifier(node: Node): node is StaticKeyword;
/** @internal */
export declare function isAbstractModifier(node: Node): node is AbstractKeyword;
/** @internal */
export declare function isOverrideModifier(node: Node): node is OverrideKeyword;
/** @internal */
export declare function isAccessorModifier(node: Node): node is AccessorKeyword;
/** @internal */
export declare function isSuperKeyword(node: Node): node is SuperExpression;
/** @internal */
export declare function isImportKeyword(node: Node): node is ImportExpression;
/** @internal */
export declare function isCaseKeyword(node: Node): node is CaseKeyword;
export declare function isQualifiedName(node: Node): node is QualifiedName;
export declare function isComputedPropertyName(node: Node): node is ComputedPropertyName;
export declare function isTypeParameterDeclaration(node: Node): node is TypeParameterDeclaration;
export declare function isParameter(node: Node): node is ParameterDeclaration;
export declare function isDecorator(node: Node): node is Decorator;
export declare function isPropertySignature(node: Node): node is PropertySignature;
export declare function isPropertyDeclaration(node: Node): node is PropertyDeclaration;
export declare function isMethodSignature(node: Node): node is MethodSignature;
export declare function isMethodDeclaration(node: Node): node is MethodDeclaration;
export declare function isClassStaticBlockDeclaration(node: Node): node is ClassStaticBlockDeclaration;
export declare function isConstructorDeclaration(node: Node): node is ConstructorDeclaration;
export declare function isGetAccessorDeclaration(node: Node): node is GetAccessorDeclaration;
export declare function isSetAccessorDeclaration(node: Node): node is SetAccessorDeclaration;
export declare function isCallSignatureDeclaration(node: Node): node is CallSignatureDeclaration;
export declare function isConstructSignatureDeclaration(node: Node): node is ConstructSignatureDeclaration;
export declare function isIndexSignatureDeclaration(node: Node): node is IndexSignatureDeclaration;
export declare function isTypePredicateNode(node: Node): node is TypePredicateNode;
export declare function isTypeReferenceNode(node: Node): node is TypeReferenceNode;
export declare function isFunctionTypeNode(node: Node): node is FunctionTypeNode;
export declare function isConstructorTypeNode(node: Node): node is ConstructorTypeNode;
export declare function isTypeQueryNode(node: Node): node is TypeQueryNode;
export declare function isTypeLiteralNode(node: Node): node is TypeLiteralNode;
export declare function isArrayTypeNode(node: Node): node is ArrayTypeNode;
export declare function isTupleTypeNode(node: Node): node is TupleTypeNode;
export declare function isNamedTupleMember(node: Node): node is NamedTupleMember;
export declare function isOptionalTypeNode(node: Node): node is OptionalTypeNode;
export declare function isRestTypeNode(node: Node): node is RestTypeNode;
export declare function isUnionTypeNode(node: Node): node is UnionTypeNode;
export declare function isIntersectionTypeNode(node: Node): node is IntersectionTypeNode;
export declare function isConditionalTypeNode(node: Node): node is ConditionalTypeNode;
export declare function isInferTypeNode(node: Node): node is InferTypeNode;
export declare function isParenthesizedTypeNode(node: Node): node is ParenthesizedTypeNode;
export declare function isThisTypeNode(node: Node): node is ThisTypeNode;
export declare function isTypeOperatorNode(node: Node): node is TypeOperatorNode;
export declare function isIndexedAccessTypeNode(node: Node): node is IndexedAccessTypeNode;
export declare function isMappedTypeNode(node: Node): node is MappedTypeNode;
export declare function isLiteralTypeNode(node: Node): node is LiteralTypeNode;
export declare function isImportTypeNode(node: Node): node is ImportTypeNode;
export declare function isTemplateLiteralTypeSpan(node: Node): node is TemplateLiteralTypeSpan;
export declare function isTemplateLiteralTypeNode(node: Node): node is TemplateLiteralTypeNode;
export declare function isObjectBindingPattern(node: Node): node is ObjectBindingPattern;
export declare function isArrayBindingPattern(node: Node): node is ArrayBindingPattern;
export declare function isBindingElement(node: Node): node is BindingElement;
export declare function isArrayLiteralExpression(node: Node): node is ArrayLiteralExpression;
export declare function isObjectLiteralExpression(node: Node): node is ObjectLiteralExpression;
export declare function isPropertyAccessExpression(node: Node): node is PropertyAccessExpression;
export declare function isElementAccessExpression(node: Node): node is ElementAccessExpression;
export declare function isCallExpression(node: Node): node is CallExpression;
export declare function isNewExpression(node: Node): node is NewExpression;
export declare function isTaggedTemplateExpression(node: Node): node is TaggedTemplateExpression;
export declare function isTypeAssertionExpression(node: Node): node is TypeAssertion;
export declare function isParenthesizedExpression(node: Node): node is ParenthesizedExpression;
export declare function isFunctionExpression(node: Node): node is FunctionExpression;
export declare function isArrowFunction(node: Node): node is ArrowFunction;
export declare function isDeleteExpression(node: Node): node is DeleteExpression;
export declare function isTypeOfExpression(node: Node): node is TypeOfExpression;
export declare function isVoidExpression(node: Node): node is VoidExpression;
export declare function isAwaitExpression(node: Node): node is AwaitExpression;
export declare function isPrefixUnaryExpression(node: Node): node is PrefixUnaryExpression;
export declare function isPostfixUnaryExpression(node: Node): node is PostfixUnaryExpression;
export declare function isBinaryExpression(node: Node): node is BinaryExpression;
export declare function isConditionalExpression(node: Node): node is ConditionalExpression;
export declare function isTemplateExpression(node: Node): node is TemplateExpression;
export declare function isYieldExpression(node: Node): node is YieldExpression;
export declare function isSpreadElement(node: Node): node is SpreadElement;
export declare function isClassExpression(node: Node): node is ClassExpression;
export declare function isOmittedExpression(node: Node): node is OmittedExpression;
export declare function isExpressionWithTypeArguments(node: Node): node is ExpressionWithTypeArguments;
export declare function isAsExpression(node: Node): node is AsExpression;
export declare function isSatisfiesExpression(node: Node): node is SatisfiesExpression;
export declare function isNonNullExpression(node: Node): node is NonNullExpression;
export declare function isMetaProperty(node: Node): node is MetaProperty;
export declare function isSyntheticExpression(node: Node): node is SyntheticExpression;
export declare function isPartiallyEmittedExpression(node: Node): node is PartiallyEmittedExpression;
export declare function isCommaListExpression(node: Node): node is CommaListExpression;
export declare function isTemplateSpan(node: Node): node is TemplateSpan;
export declare function isSemicolonClassElement(node: Node): node is SemicolonClassElement;
export declare function isBlock(node: Node): node is Block;
export declare function isVariableStatement(node: Node): node is VariableStatement;
export declare function isEmptyStatement(node: Node): node is EmptyStatement;
export declare function isExpressionStatement(node: Node): node is ExpressionStatement;
export declare function isIfStatement(node: Node): node is IfStatement;
export declare function isDoStatement(node: Node): node is DoStatement;
export declare function isWhileStatement(node: Node): node is WhileStatement;
export declare function isForStatement(node: Node): node is ForStatement;
export declare function isForInStatement(node: Node): node is ForInStatement;
export declare function isForOfStatement(node: Node): node is ForOfStatement;
export declare function isContinueStatement(node: Node): node is ContinueStatement;
export declare function isBreakStatement(node: Node): node is BreakStatement;
export declare function isReturnStatement(node: Node): node is ReturnStatement;
export declare function isWithStatement(node: Node): node is WithStatement;
export declare function isSwitchStatement(node: Node): node is SwitchStatement;
export declare function isLabeledStatement(node: Node): node is LabeledStatement;
export declare function isThrowStatement(node: Node): node is ThrowStatement;
export declare function isTryStatement(node: Node): node is TryStatement;
export declare function isDebuggerStatement(node: Node): node is DebuggerStatement;
export declare function isVariableDeclaration(node: Node): node is VariableDeclaration;
export declare function isVariableDeclarationList(node: Node): node is VariableDeclarationList;
export declare function isFunctionDeclaration(node: Node): node is FunctionDeclaration;
export declare function isClassDeclaration(node: Node): node is ClassDeclaration;
export declare function isInterfaceDeclaration(node: Node): node is InterfaceDeclaration;
export declare function isTypeAliasDeclaration(node: Node): node is TypeAliasDeclaration;
export declare function isEnumDeclaration(node: Node): node is EnumDeclaration;
export declare function isModuleDeclaration(node: Node): node is ModuleDeclaration;
export declare function isModuleBlock(node: Node): node is ModuleBlock;
export declare function isCaseBlock(node: Node): node is CaseBlock;
export declare function isNamespaceExportDeclaration(node: Node): node is NamespaceExportDeclaration;
export declare function isImportEqualsDeclaration(node: Node): node is ImportEqualsDeclaration;
export declare function isImportDeclaration(node: Node): node is ImportDeclaration;
export declare function isImportClause(node: Node): node is ImportClause;
export declare function isImportTypeAssertionContainer(node: Node): node is ImportTypeAssertionContainer;
export declare function isAssertClause(node: Node): node is AssertClause;
export declare function isAssertEntry(node: Node): node is AssertEntry;
export declare function isNamespaceImport(node: Node): node is NamespaceImport;
export declare function isNamespaceExport(node: Node): node is NamespaceExport;
export declare function isNamedImports(node: Node): node is NamedImports;
export declare function isImportSpecifier(node: Node): node is ImportSpecifier;
export declare function isExportAssignment(node: Node): node is ExportAssignment;
export declare function isExportDeclaration(node: Node): node is ExportDeclaration;
export declare function isNamedExports(node: Node): node is NamedExports;
export declare function isExportSpecifier(node: Node): node is ExportSpecifier;
export declare function isMissingDeclaration(node: Node): node is MissingDeclaration;
export declare function isNotEmittedStatement(node: Node): node is NotEmittedStatement;
/** @internal */
export declare function isSyntheticReference(node: Node): node is SyntheticReferenceExpression;
/** @internal */
export declare function isMergeDeclarationMarker(node: Node): node is MergeDeclarationMarker;
/** @internal */
export declare function isEndOfDeclarationMarker(node: Node): node is EndOfDeclarationMarker;
export declare function isExternalModuleReference(node: Node): node is ExternalModuleReference;
export declare function isJsxElement(node: Node): node is JsxElement;
export declare function isJsxSelfClosingElement(node: Node): node is JsxSelfClosingElement;
export declare function isJsxOpeningElement(node: Node): node is JsxOpeningElement;
export declare function isJsxClosingElement(node: Node): node is JsxClosingElement;
export declare function isJsxFragment(node: Node): node is JsxFragment;
export declare function isJsxOpeningFragment(node: Node): node is JsxOpeningFragment;
export declare function isJsxClosingFragment(node: Node): node is JsxClosingFragment;
export declare function isJsxAttribute(node: Node): node is JsxAttribute;
export declare function isJsxAttributes(node: Node): node is JsxAttributes;
export declare function isJsxSpreadAttribute(node: Node): node is JsxSpreadAttribute;
export declare function isJsxExpression(node: Node): node is JsxExpression;
export declare function isCaseClause(node: Node): node is CaseClause;
export declare function isDefaultClause(node: Node): node is DefaultClause;
export declare function isHeritageClause(node: Node): node is HeritageClause;
export declare function isCatchClause(node: Node): node is CatchClause;
export declare function isPropertyAssignment(node: Node): node is PropertyAssignment;
export declare function isShorthandPropertyAssignment(node: Node): node is ShorthandPropertyAssignment;
export declare function isSpreadAssignment(node: Node): node is SpreadAssignment;
export declare function isEnumMember(node: Node): node is EnumMember;
/** @deprecated */
export declare function isUnparsedPrepend(node: Node): node is UnparsedPrepend;
export declare function isSourceFile(node: Node): node is SourceFile;
export declare function isBundle(node: Node): node is Bundle;
/** @deprecated */
export declare function isUnparsedSource(node: Node): node is UnparsedSource;
export declare function isJSDocTypeExpression(node: Node): node is JSDocTypeExpression;
export declare function isJSDocNameReference(node: Node): node is JSDocNameReference;
export declare function isJSDocMemberName(node: Node): node is JSDocMemberName;
export declare function isJSDocLink(node: Node): node is JSDocLink;
export declare function isJSDocLinkCode(node: Node): node is JSDocLinkCode;
export declare function isJSDocLinkPlain(node: Node): node is JSDocLinkPlain;
export declare function isJSDocAllType(node: Node): node is JSDocAllType;
export declare function isJSDocUnknownType(node: Node): node is JSDocUnknownType;
export declare function isJSDocNullableType(node: Node): node is JSDocNullableType;
export declare function isJSDocNonNullableType(node: Node): node is JSDocNonNullableType;
export declare function isJSDocOptionalType(node: Node): node is JSDocOptionalType;
export declare function isJSDocFunctionType(node: Node): node is JSDocFunctionType;
export declare function isJSDocVariadicType(node: Node): node is JSDocVariadicType;
export declare function isJSDocNamepathType(node: Node): node is JSDocNamepathType;
export declare function isJSDoc(node: Node): node is JSDoc;
export declare function isJSDocTypeLiteral(node: Node): node is JSDocTypeLiteral;
export declare function isJSDocSignature(node: Node): node is JSDocSignature;
export declare function isJSDocAugmentsTag(node: Node): node is JSDocAugmentsTag;
export declare function isJSDocAuthorTag(node: Node): node is JSDocAuthorTag;
export declare function isJSDocClassTag(node: Node): node is JSDocClassTag;
export declare function isJSDocCallbackTag(node: Node): node is JSDocCallbackTag;
export declare function isJSDocPublicTag(node: Node): node is JSDocPublicTag;
export declare function isJSDocPrivateTag(node: Node): node is JSDocPrivateTag;
export declare function isJSDocProtectedTag(node: Node): node is JSDocProtectedTag;
export declare function isJSDocReadonlyTag(node: Node): node is JSDocReadonlyTag;
export declare function isJSDocOverrideTag(node: Node): node is JSDocOverrideTag;
export declare function isJSDocOverloadTag(node: Node): node is JSDocOverloadTag;
export declare function isJSDocDeprecatedTag(node: Node): node is JSDocDeprecatedTag;
export declare function isJSDocSeeTag(node: Node): node is JSDocSeeTag;
export declare function isJSDocEnumTag(node: Node): node is JSDocEnumTag;
export declare function isJSDocParameterTag(node: Node): node is JSDocParameterTag;
export declare function isJSDocReturnTag(node: Node): node is JSDocReturnTag;
export declare function isJSDocThisTag(node: Node): node is JSDocThisTag;
export declare function isJSDocTypeTag(node: Node): node is JSDocTypeTag;
export declare function isJSDocTemplateTag(node: Node): node is JSDocTemplateTag;
export declare function isJSDocTypedefTag(node: Node): node is JSDocTypedefTag;
export declare function isJSDocUnknownTag(node: Node): node is JSDocUnknownTag;
export declare function isJSDocPropertyTag(node: Node): node is JSDocPropertyTag;
export declare function isJSDocImplementsTag(node: Node): node is JSDocImplementsTag;
export declare function isJSDocSatisfiesTag(node: Node): node is JSDocSatisfiesTag;
export declare function isJSDocThrowsTag(node: Node): node is JSDocThrowsTag;
/** @internal */
export declare function isSyntaxList(n: Node): n is SyntaxList;
//# sourceMappingURL=nodeTests.d.ts.map